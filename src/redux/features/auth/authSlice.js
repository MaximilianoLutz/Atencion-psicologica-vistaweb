import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchToken } from '../../../api/requestApi';


const initialState = {
    checking: true,
    uidAuth: null,
    name: null,
    profesionalesUser: []
}


export const startLogin = createAsyncThunk(
  'auth/startLogin',
  async (data) => {
    const response = await fetchToken(data.email, data.password);
    // const { access_token, Name, Uid: uidAuth } = await response.json();
      
        return response.json();
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      state.checking = true;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setUserData: (state, action) => {
      state.uidAuth = action.payload.Uid;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(startLogin.pending, (state) => {
        state.checking = true;
        console.log('pending');
      })
      .addCase(startLogin.fulfilled, (state, action) => {
        localStorage.setItem('access_token', action.payload.access_token);
        state.checking = false;
        state.uidAuth = action.payload.Uid;
        state.name = action.payload.Name;
        console.log('filfilled');

      }).addCase(startLogin.rejected, (state)=>{
        state.checking = true;
        console.log('rejected');

      });
  },
});

export const { logout  } = authSlice.actions;

export const selectAuth= (state) => state;


export default authSlice.reducer;
